#cloud-config
users:
  - name: root
    lock_passwd: false
write_files:
- path: /root/ {{- if .ControlPlane -}} control_plane {{- else -}} node {{- end -}} .sh
  owner: root
  content: |
    #!/usr/bin/env bash
    catch() {
      vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $?"
      ERROR_MESSAGE="$(date) $(caller): $BASH_COMMAND"
      echo "$ERROR_MESSAGE" &>> /var/log/capvcd/customization/error.log
      vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $ERROR_MESSAGE"

      CLOUD_INIT_OUTPUT=""
      if [[ -f /var/log/cloud-init-output.log ]]
      then
        CLOUD_INIT_OUTPUT=$(</var/log/cloud-init-output.log)
      fi
      vmtoolsd --cmd "info-set guestinfo.post_customization_cloud_init_output $CLOUD_INIT_OUTPUT"
    }
    mkdir -p /var/log/capvcd/customization
    trap 'catch $? $LINENO' ERR EXIT
    set -ex

    echo "$(date) Post Customization script execution in progress" &>> /var/log/capvcd/customization/status.log {{- if .ControlPlane }}

    VCLOUD_BASIC_AUTH_PATH=/root/vcloud-basic-auth.yaml
    VCLOUD_CONFIGMAP_PATH=/root/vcloud-configmap.yaml
    VCLOUD_CCM_PATH=/root/cloud-director-ccm.yaml
    VCLOUD_CSI_CONFIGMAP_PATH=/root/vcloud-csi-configmap.yaml
    CSI_DRIVER_PATH=/root/csi-driver.yaml
    CSI_CONTROLLER_PATH=/root/csi-controller.yaml
    CSI_NODE_PATH=/root/csi-node.yaml {{- end }}

    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status in_progress"
    hostname "{{ .MachineName }}"
    echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    echo "127.0.0.1   localhost" >>/etc/hosts
    echo "{{ .MachineName }}" >/etc/hostname
    echo "127.0.0.1" `hostname` >>/etc/hosts
    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"
    
    vmtoolsd --cmd "info-set guestinfo.metering.status in_progress"
    vmtoolsd --cmd "info-set guestinfo.metering.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status in_progress"
    export HTTP_PROXY="{{.HTTPProxy}}"
    export HTTPS_PROXY="{{.HTTPSProxy}}"
    export http_proxy="{{.HTTPProxy}}"
    export https_proxy="{{.HTTPSProxy}}"
    export NO_PROXY="{{.NoProxy}}"
    export no_proxy="{{.NoProxy}}"
    mkdir -p /etc/systemd/system/containerd.service.d 2>/dev/null || true 
    cat <<END > /etc/systemd/system/containerd.service.d/http-proxy.conf
    [Service]
    Environment="HTTP_PROXY={{.HTTPProxy}}"
    Environment="HTTPS_PROXY={{.HTTPSProxy}}"
    Environment="http_proxy={{.HTTPProxy}}"
    Environment="https_proxy={{.HTTPSProxy}}"
    Environment="no_proxy={{.NoProxy}}"
    Environment="NO_PROXY={{.NoProxy}}"
    END
    systemctl daemon-reload
    systemctl restart containerd
    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status successful"


    vmtoolsd --cmd "info-set {{ if .ControlPlane -}} guestinfo.postcustomization.kubeinit.status {{- else -}} guestinfo.postcustomization.kubeadm.node.join.status {{- end }} in_progress"
    {{ .BootstrapRunCmd }}
    if [[ ! -f /run/cluster-api/bootstrap-success.complete ]]
    then
      echo "file /run/cluster-api/bootstrap-success.complete not found" &>> /var/log/capvcd/customization/error.log
    exit 1
    fi
    vmtoolsd --cmd "info-set {{ if .ControlPlane -}} guestinfo.postcustomization.kubeinit.status {{- else -}} guestinfo.postcustomization.kubeadm.node.join.status {{- end }} successful"

    echo "$(date) post customization script execution completed" &>> /var/log/capvcd/customization/status.log
    exit 0
runcmd:
- 'cloud-init clean'
{{ if .ControlPlane }}
- '[ ! -f /root/control_plane.sh ] && sudo reboot'
- '[ ! -f /run/kubeadm/kubeadm.yaml ] && sudo reboot'
- bash /root/control_plane.sh
{{ else }}
- '[ ! -f /root/node.sh ] && sudo reboot'
- '[ ! -f /run/kubeadm/kubeadm-join-config.yaml ] && sudo reboot'
- bash /root/node.sh
{{ end }}
timezone: UTC
disable_root: false
disable_vmware_customization: true
network: 
  config: disabled
preserve_hostname: false
hostname: "{{ .MachineName }}"
final_message: "The system is ready after $UPTIME seconds"
